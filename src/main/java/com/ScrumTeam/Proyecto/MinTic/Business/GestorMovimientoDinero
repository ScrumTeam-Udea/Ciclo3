package com.ScrumTeam.Proyecto.MinTic.Business;
import com.ScrumTeam.Proyecto.MinTic.Modelado_MovimientoDinero.MovimientoDinero;

import java.util.ArrayList;


public class GestorMovimientoDinero {


   private ArrayList<MovimientoDinero> movimientoDinero;

   
   public GestorMovimientoDinero(){
        this.movimientoDinero = new ArrayList<>();



         //Verificación de existencia de empresa.... 
 
    public MovimientoDinero getMovimientoDinero (String id) throws Exception{
        for (MovimientoDiner movimientoDinero: this.movimientoDinero){
            if (movimientoDinero.getId().equals(id) ){
                return movimientoDinero;
            }
        }
        throw new Exception("Movimiento no existe.");
    }
    
    

           //Creación y verificación de existencia de Empresa

    public String setMovimientoDinero (MovimientoDinero movimientoDinero) throws Exception{
        try {
            getMovimientoDinero (movimientoDinero.getId());

        }catch (Exception e){

            this.movimientoDinero.add(movimientoDinero);
            return "Nuevo Movimiento De Dinero Creado Con Éxito.";
        }
        throw new Exception("Movimiento ya existe.");
    }



          //Metodo para usar el PATCH y actualizar solo una o mas variables
          
    public MovimientoDinero updateMovimientoDinero(MovimientoDinero movimientoDinero_update, String id) throws Exception {
        try {
            MovimientoDinero movimientoDinero_bd = getMovimientoDinero(id);
            
            if (movimientoDinero_update.getConcepto() != null) {
                movimientoDinero_bd.setConcepto(movimientoDinero_update.getConcepto());
            }
            if (movimientoDinero_update.getMonto() != null) {
                movimientoDinero_bd.setMonto(empresa_update.getMonto());
            }
           
            return movimientoDinero_bd;
        } catch (Exception e) {
            throw new Exception("Falló actualización de datos.");
        }
    }



           // Metodo para usar el PUT, Y actualizar el objeto completo
           
    public MovimientoDinero updateMovimientoDineroAll(MovimientoDinero movimientoDinero_update, String id) throws Exception {

        try {
            MovimientoDinero movimientoDinero_bd = getMovimientoDinero(id);
            movimientoDinero_bd.setConcepto(movimientoDinero_update.getConcepto());
            movimientoDinero_bd.setMonto(movimientoDinero_update.getMonto());

            return movimientoDinero_bd;
        } catch (Exception e) {
            throw new Exception("Falló actualización de datos.");
        }
    }


           //DELETE metodo para usar el DELETE en el controlador

    public String deleteMovimientoDinero (String id) throws Exception {
        try {
            MovimientoDinero movimientoDinero = getMovimientoDinero(id);
            this.movimientoDinero.remove(movimientoDinero);
            return "Movimiento eliminado existosamente.";
        }catch (Exception e) {
            throw new Exception("Empresa No existe para eliminar.");
        }
    }


}
